name: Auto Release on Push

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version from latest git tag
        id: get_version
        run: |
          # Get the latest tag, or default to 4.5.5 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v4.5.5")
          CURRENT_VERSION="${LATEST_TAG#v}"  # Remove 'v' prefix
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Auto-increment patch version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Auto-incrementing version from latest tag: $CURRENT_VERSION → $NEW_VERSION"

      - name: Update version in package.json
        run: |
          npm version ${{ steps.get_version.outputs.new }} --no-git-tag-version

      - name: Build app
        run: npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build artifacts
        run: |
          echo "📦 Verifying build artifacts..."
          ls -lh release/

          # Check for required files
          if [ ! -d "release" ]; then
            echo "❌ Error: release directory not found!"
            exit 1
          fi

          DMG_COUNT=$(ls release/*.dmg 2>/dev/null | wc -l)
          ZIP_COUNT=$(ls release/*.zip 2>/dev/null | wc -l)

          if [ "$DMG_COUNT" -eq 0 ]; then
            echo "❌ Error: No .dmg files found!"
            exit 1
          fi

          if [ "$ZIP_COUNT" -eq 0 ]; then
            echo "❌ Error: No .zip files found!"
            exit 1
          fi

          echo "✅ Found $DMG_COUNT .dmg file(s) and $ZIP_COUNT .zip file(s)"

      - name: Fix latest-mac.yml file names
        run: |
          cd release
          if [ ! -f latest-mac.yml ]; then
            echo "❌ Error: latest-mac.yml not found!"
            exit 1
          fi
          sed -i '' 's/Hauskat-Mission-Control/Hauskat.Mission.Control/g' latest-mac.yml
          echo "✅ Fixed latest-mac.yml"

          # Verify the file contains expected artifact names
          if ! grep -q "Hauskat.Mission.Control" latest-mac.yml; then
            echo "⚠️  Warning: latest-mac.yml may not contain expected artifact names"
            cat latest-mac.yml
            exit 1
          fi
          echo "✅ Verified latest-mac.yml contains correct artifact names"
          cat latest-mac.yml

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.new }} [skip ci]"
          git push origin main

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if tag already exists
          if git rev-parse v${{ steps.get_version.outputs.new }} >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.new }} already exists, skipping..."
          else
            git tag v${{ steps.get_version.outputs.new }}
            git push origin v${{ steps.get_version.outputs.new }}
            echo "✅ Created and pushed tag v${{ steps.get_version.outputs.new }}"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.new }}
          name: v${{ steps.get_version.outputs.new }}
          body: |
            ## 🚀 Auto-Release v${{ steps.get_version.outputs.new }}

            Auto-generated release from commit ${{ github.sha }}

            ### Changes
            ${{ github.event.head_commit.message }}

            ---
            🤖 This release was automatically generated on push to main
          files: |
            release/*.dmg
            release/*.zip
            release/latest-mac.yml
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: |
            release/*.dmg
            release/*.zip
            release/*.yml
          retention-days: 5
